#include<bits/stdc++.h>
int dirs[4][2] = {{-1,0},{0,1},{1,0},{0,-1}};

int minTimeToRot(vector<vector<int>>& grid, int n, int m)
{
    // do bfs
    queue<pair<int,int>> q;
    vector<vector<bool>> visited(n,vector<bool> (m,false));
    for(int i=0;i<n;i++){
      for(int j=0;j<m;j++){
          if(grid[i][j]==2){
              q.push({i,j});
              visited[i][j]=true;
          }
      }
    }
 
    if(q.size()==0){
        return 0;
    }
 
    int level=0;
    while(q.size()>0){
        int sz = q.size();

        for(int i=0;i<sz;i++){
            int row = q.front().first;
            int col = q.front().second;
            q.pop();

            for(int k=0;k<4;k++){
                int nx = row + dirs[k][0];
                int ny = col + dirs[k][1];

                if(nx>=0 && ny>=0 && nx<n && ny<m && grid[nx][ny]==1 && !visited[nx][ny]){
                q.push({nx, ny});
                visited[nx][ny] = true;
                }
            }
        }
        level++;
    }

    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(grid[i][j]==1 && !visited[i][j]){
                return -1;
            }
        }
    }

    return level-1;
}
