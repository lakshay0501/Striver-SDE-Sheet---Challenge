#include<bits/stdc++.h>
int solve(int idx,vector<int>&values,vector<int>&weights,int w,vector<vector<int>>&dp){

    if(idx>=values.size()){
		return 0;
	}

	if(dp[idx][w]!=-1){
		return dp[idx][w];
	}

	int nottake = solve(idx+1,values,weights,w,dp);

	int take = INT_MIN;

	if(w>=weights[idx]) take = values[idx] + solve(idx+1,values,weights,w-weights[idx],dp);

	return dp[idx][w] = max(take,nottake);
}

int maxProfit(vector<int> &values, vector<int> &weights, int n, int w)
{
	vector<vector<int>> dp(n+1,vector<int> (w+1,-1));
	return solve(0,values,weights,w,dp);
}
